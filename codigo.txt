//transformar o abaixo em codigo da main e usar o vetor listaNos como parametro
    int Tamanho, x;
    cout << "Digite o numero de vértices que serão adicionados no subgrafo vértice induzido" << endl;
    cin >> Tamanho;
    int *listaNos = new int[this->order];
    for (int i = 0; i < this->order; i++)
    {
        listaNos[i] = -1;
    }
    for (int i = 0; i < Tamanho; i++)
    {
        cout << "Digite o vértice numero " << i + 1 << endl;
        cin >> x;
        listaNos[i] = x;
    }

    Graph *grafoVI;
    grafoVI = this->getVertexInduced(listaNos);
    
    //Criar uma lista L com as arestas ordenadas em
    //ordem crescente de pesos.
    int lista[grafoVI->getNumberEdges()][2];
    Node *p;
    Node *aux;
    Edge *sup;
    int i = 0;
    while (i < grafoVI->getNumberEdges())
    {

        for (p = grafoVI->getFirstNode(); p != NULL; p = p->getNextNode())
        {
            for (sup = p->getFirstEdge(); sup != NULL; sup = sup->getNextEdge())
            {
                lista[i][0] = p->getId();
                lista[i][1] = sup->getTargetId();
                i++;
            }
        }
    }
    i = 0;
    while (i < grafoVI->getNumberEdges())
    {

        for (p = grafoVI->getFirstNode(); p != NULL; p = p->getNextNode())
        {
            for (sup = p->getFirstEdge(); sup != NULL; sup = sup->getNextEdge())
            {

                lista[i][0] = p->getId();
                lista[i][1] = sup->getTargetId();
                i++;
            }
        }
    }
    //Criar |V| subárvores contendo cada uma um nó
    //isolado.
    Graph *subGrafoNovo = new Graph(this->directed, this->weighted_edge, this->weighted_node);
    for (p = grafoVI->getFirstNode(); p != NULL; p = p->getNextNode())
    {
        subGrafoNovo->insertNode(p->getId());
    }
    //F ¬ Æ
    //Cria lista vazia

    //contador ¬ 0
    int conta = 0;
    //Enquanto contador < |V|-1 e L 1 Æ faça
    while(conta<(subGrafoNovo->getOrder()-1 && "Lista vazia ou percorrida"){
        //Seja (u,v) a próxima aresta de L.
        if (" acesso a aresta")
        {
            //L ¬ L – {(u,v)}
        }
        //Se u e v não estão na mesma subárvore então
        if (!verificaSubarvore("arestas")) // só usar o busca por profundidade com um metodo avulso pra ser capa de verificar
        {

            //F ¬ F È {(u,v)}
            //preenche a lista;

            //busca o peso da aresta
            int peso = getWeightFromEdgeNodeCombo();

            //Unir as subárvores que contêm u e v.
            subGrafoNovo->insertEdge("noh de saida", "noh de chegada", peso);

            //contador ¬ contador + 1
        }
        //fim-se
        //fim-enquanto
    }
    
    return grafoVI;
}

int getWeightFromEdgeNodeCombo(int idNoh, int idAresta, Graph *subGrafo)
{
    Node *p = subGrafo->getNode(idNoh);
    Edge *aux;
    for (aux = p->getFirstEdge(); aux != NULL; aux = aux->getNextEdge())
    {
        if (aux->getTargetId() == idAresta)
        {
            break;
        }
    }
    return aux->getWeight();
}

void getWeithlessEdge(Graph *subGrafo, int *nohAresta)
{
    Node *p;
    Node *aux;
    Edge *sup;
    int menor = 9999999;

    for (p = subGrafo->getFirstNode(); p != NULL; p = p->getNextNode())
    {
        for (sup = p->getFirstEdge(); sup != NULL; sup = sup->getNextEdge())
        {
            if (sup->getWeight() < menor)
            {
                nohAresta[0] = p->getId();
                nohAresta[1] = sup->getTargetId();
                nohAresta[2] = sup->getWeight();
                menor = sup->getWeight();
            }
        }
    }
}
